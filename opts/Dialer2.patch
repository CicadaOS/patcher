From 9cbd1c1c3f4b5ce530739e5c58e3fa7cf236761c Mon Sep 17 00:00:00 2001
From: Ali B <abittin@gmail.com>
Date: Tue, 14 Feb 2017 18:58:27 +0300
Subject: [PATCH] InCallUI: SmartMute

Mute the incoming call by flipping the phone

AICP: Brought to N by combining into one commit
3a4c1f7b7b319a3bfd560423ae19e4da3f52eda1
9063092dfc3eac9bc30f73fdca40ec6fe1aa1f44

Change-Id: I3ff27450eecbf501fafb2d75317a0d7dd844e7b2
Signed-off-by: linuxxxxx <joey@cyanogenmoditalia.it>
---
 .../android/incallui/AccelerometerListener.java    | 79 ++++++++++++++++++++--
 .../src/com/android/incallui/InCallPresenter.java  | 39 ++++++++++-
 .../src/com/android/incallui/ProximitySensor.java  |  9 ++-
 res/values/strings.xml                             |  5 ++
 res/xml/sound_settings.xml                         | 13 ++++
 .../dialer/settings/SoundSettingsFragment.java     |  2 +
 6 files changed, 139 insertions(+), 8 deletions(-)

diff --git a/InCallUI/src/com/android/incallui/AccelerometerListener.java b/InCallUI/src/com/android/incallui/AccelerometerListener.java
index b5ad296..8abe45d 100644
--- a/InCallUI/src/com/android/incallui/AccelerometerListener.java
+++ b/InCallUI/src/com/android/incallui/AccelerometerListener.java
@@ -46,7 +46,7 @@
     // mOrientation.
     private int mPendingOrientation;
 
-    private OrientationListener mListener;
+    private ChangeListener mListener;
 
     // Device orientation
     public static final int ORIENTATION_UNKNOWN = 0;
@@ -54,13 +54,25 @@
     public static final int ORIENTATION_HORIZONTAL = 2;
 
     private static final int ORIENTATION_CHANGED = 1234;
+    private static final int FACE_UP_CHANGED = 1235;
 
     private static final int VERTICAL_DEBOUNCE = 100;
     private static final int HORIZONTAL_DEBOUNCE = 500;
     private static final double VERTICAL_ANGLE = 50.0;
 
-    public interface OrientationListener {
-        public void orientationChanged(int orientation);
+    // Flip detection
+    private static final int FACE_UP_GRAVITY_THRESHOLD = 7;
+    private static final int FACE_DOWN_GRAVITY_THRESHOLD = -7;
+    private static final int SENSOR_SAMPLES = 3;
+    private static final int MIN_ACCEPT_COUNT = SENSOR_SAMPLES - 1;
+
+    private boolean mWasFaceUp;
+    private boolean[] mSamples = new boolean[SENSOR_SAMPLES];
+    private int mSampleIndex;
+
+    public interface ChangeListener {
+        void onOrientationChanged(int orientation);
+        void onDeviceFlipped(boolean faceDown);
     }
 
     public AccelerometerListener(Context context) {
@@ -68,7 +80,13 @@ public AccelerometerListener(Context context) {
         mSensor = mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
     }
 
-    public void setListener(OrientationListener listener) {
+    public AccelerometerListener(Context context, ChangeListener listener) {
+        setListener(listener);
+        mSensorManager = (SensorManager)context.getSystemService(Context.SENSOR_SERVICE);
+        mSensor = mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
+    }
+
+    public void setListener(ChangeListener listener) {
         mListener = listener;
     }
 
@@ -78,6 +96,8 @@ public void enable(boolean enable) {
             if (enable) {
                 mOrientation = ORIENTATION_UNKNOWN;
                 mPendingOrientation = ORIENTATION_UNKNOWN;
+                mWasFaceUp = false;
+                resetFlipSamples();
                 mSensorManager.registerListener(mSensorListener, mSensor,
                         SensorManager.SENSOR_DELAY_NORMAL);
             } else {
@@ -87,6 +107,22 @@ public void enable(boolean enable) {
         }
     }
 
+    private void resetFlipSamples() {
+        for (int i = 0; i < SENSOR_SAMPLES; i++) {
+            mSamples[i] = false;
+        }
+    }
+
+    private boolean filterFlipSamples() {
+        int trues = 0;
+        for (int i = 0; i < mSamples.length; i++) {
+            if (mSamples[i]) {
+                ++trues;
+            }
+        }
+        return trues >= MIN_ACCEPT_COUNT;
+    }
+
     private void setOrientation(int orientation) {
         synchronized (this) {
             if (mPendingOrientation == orientation) {
@@ -115,6 +151,17 @@ private void setOrientation(int orientation) {
         }
     }
 
+    private void setIsFaceUp(boolean faceUp) {
+        synchronized (this) {
+            if (mWasFaceUp != faceUp) {
+                mHandler.removeMessages(FACE_UP_CHANGED);
+                mHandler.obtainMessage(FACE_UP_CHANGED, faceUp ? 1 : 0, 0).sendToTarget();
+                mWasFaceUp = faceUp;
+                resetFlipSamples();
+            }
+        }
+    }
+
     private void onSensorEvent(double x, double y, double z) {
         if (VDEBUG) Log.d(TAG, "onSensorEvent(" + x + ", " + y + ", " + z + ")");
 
@@ -131,6 +178,25 @@ private void onSensorEvent(double x, double y, double z) {
         final int orientation = (angle >  VERTICAL_ANGLE ? ORIENTATION_VERTICAL : ORIENTATION_HORIZONTAL);
         if (VDEBUG) Log.d(TAG, "angle: " + angle + " orientation: " + orientation);
         setOrientation(orientation);
+
+        boolean nowFaceUp, wasFaceUp;
+        synchronized (this) {
+            nowFaceUp = wasFaceUp = mWasFaceUp;
+        }
+
+        if (!wasFaceUp) {
+            // Check if its face up enough.
+            mSamples[mSampleIndex] = z > FACE_UP_GRAVITY_THRESHOLD;
+        } else {
+            // Check if its face down enough.
+            mSamples[mSampleIndex] = z < FACE_DOWN_GRAVITY_THRESHOLD;
+        }
+        if (filterFlipSamples()) {
+            nowFaceUp = !wasFaceUp;
+        }
+
+        mSampleIndex = ((mSampleIndex + 1) % SENSOR_SAMPLES);
+        setIsFaceUp(nowFaceUp);
     }
 
     SensorEventListener mSensorListener = new SensorEventListener() {
@@ -159,10 +225,13 @@ public void handleMessage(Message msg) {
                                     : "unknown")));
                     }
                     if (mListener != null) {
-                        mListener.orientationChanged(mOrientation);
+                        mListener.onOrientationChanged(mOrientation);
                     }
                 }
                 break;
+            case FACE_UP_CHANGED:
+                mListener.onDeviceFlipped(msg.arg1 == 0);
+                break;
             }
         }
     };
diff --git a/InCallUI/src/com/android/incallui/InCallPresenter.java b/InCallUI/src/com/android/incallui/InCallPresenter.java
index d8a3f7c..5bdee34 100644
--- a/InCallUI/src/com/android/incallui/InCallPresenter.java
+++ b/InCallUI/src/com/android/incallui/InCallPresenter.java
@@ -24,11 +24,13 @@
 import android.content.Intent;
 
 import android.content.res.Resources;
+import android.content.SharedPreferences;
 import android.database.ContentObserver;
 import android.graphics.Point;
 import android.os.Bundle;
 import android.os.Handler;
 import android.os.PowerManager;
+import android.preference.PreferenceManager;
 import android.provider.CallLog;
 import android.telecom.DisconnectCause;
 import android.telecom.PhoneAccount;
@@ -80,7 +82,8 @@
  */
 public class InCallPresenter implements CallList.Listener,
         CircularRevealFragment.OnCircularRevealCompleteListener,
-        InCallVideoCallCallbackNotifier.SessionModificationListener {
+        InCallVideoCallCallbackNotifier.SessionModificationListener,
+        AccelerometerListener.ChangeListener {
 
     private static final String EXTRA_FIRST_TIME_SHOWN =
             "com.android.incallui.intent.extra.FIRST_TIME_SHOWN";
@@ -121,6 +124,7 @@
     private InCallActivity mInCallActivity;
     private InCallState mInCallState = InCallState.NO_CALLS;
     private ProximitySensor mProximitySensor;
+    private AccelerometerListener mAccelerometerListener;
     private boolean mServiceConnected = false;
     private boolean mAccountSelectionCancelled = false;
     private InCallCameraManager mInCallCameraManager = null;
@@ -338,6 +342,7 @@ public void setUp(Context context,
 
         mProximitySensor = proximitySensor;
         addListener(mProximitySensor);
+        mAccelerometerListener = new AccelerometerListener(context, this);
 
         // dismiss any pending dialogues related to earlier call, which
         // are no longer relevant now.
@@ -691,6 +696,10 @@ public void onCallListChange(CallList callList) {
         newState = startOrFinishUi(newState);
         Log.d(this, "onCallListChange newState changed to " + newState);
 
+        if (!newState.isIncoming() && mAccelerometerListener != null) {
+            mAccelerometerListener.enable(false);
+        }
+
         // Set the new state before announcing it to the world
         Log.i(this, "Phone switching state: " + oldState + " -> " + newState);
         mInCallState = newState;
@@ -724,6 +733,10 @@ public void onIncomingCall(Call call) {
         Log.i(this, "Phone switching state: " + oldState + " -> " + newState);
         mInCallState = newState;
 
+        if (newState.isIncoming() && mAccelerometerListener != null) {
+            mAccelerometerListener.enable(true);
+        }
+
         for (IncomingCallListener listener : mIncomingCallListeners) {
             listener.onIncomingCall(oldState, mInCallState, call);
         }
@@ -776,6 +789,22 @@ public void onUpgradeToVideoFail(int error, Call call) {
         //NO-OP
     }
 
+    public void onOrientationChanged(int orientation) {
+        // ignored
+    }
+
+    @Override
+    public void onDeviceFlipped(boolean faceDown) {
+        if (!faceDown) {
+            return;
+        }
+
+        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(mContext);
+        if (prefs.getBoolean("button_smart_mute", false)) {
+            getTelecomManager().silenceRinger();
+        }
+    }
+
     /**
      * Given the call list, return the state in which the in-call screen should be.
      */
@@ -1243,6 +1272,9 @@ public boolean handleCallKey() {
         if (incomingCall != null) {
             TelecomAdapter.getInstance().answerCall(
                     incomingCall.getId(), VideoProfile.STATE_AUDIO_ONLY);
+            if (mAccelerometerListener != null) {
+                mAccelerometerListener.enable(false);
+            }
             return true;
         }
 
@@ -1686,6 +1718,11 @@ private void attemptCleanup() {
             mWakeLock = null;
             mPowerManager = null;
 
+            if (mAccelerometerListener != null) {
+                mAccelerometerListener.enable(false);
+                mAccelerometerListener = null;
+            }
+
             mAudioModeProvider = null;
 
             if (mStatusBarNotifier != null) {
diff --git a/InCallUI/src/com/android/incallui/ProximitySensor.java b/InCallUI/src/com/android/incallui/ProximitySensor.java
index ae62a8e..f424c21 100644
--- a/InCallUI/src/com/android/incallui/ProximitySensor.java
+++ b/InCallUI/src/com/android/incallui/ProximitySensor.java
@@ -40,7 +40,7 @@
  * sensor should be enabled and disabled. Most of that state is fed into this class through
  * public methods.
  */
-public class ProximitySensor implements AccelerometerListener.OrientationListener,
+public class ProximitySensor implements AccelerometerListener.ChangeListener,
         InCallStateListener, AudioModeListener {
     private static final String TAG = ProximitySensor.class.getSimpleName();
 
@@ -95,11 +95,16 @@ public void tearDown() {
      * Called to identify when the device is laid down flat.
      */
     @Override
-    public void orientationChanged(int orientation) {
+    public void onOrientationChanged(int orientation) {
         mOrientation = orientation;
         updateProximitySensorMode();
     }
 
+    @Override
+    public void onDeviceFlipped(boolean faceDown) {
+        // ignored
+    }
+
     /**
      * Called to keep track of the overall UI state.
      */
diff --git a/res/values/strings.xml b/res/values/strings.xml
index cb85684..fe18224 100644
--- a/res/values/strings.xml
+++ b/res/values/strings.xml
@@ -1063,4 +1063,9 @@
 
     <!-- Accessibility announcement to indicate which call is active -->
     <string name="accessibility_call_is_active"><xliff:g id="nameOrNumber">^1</xliff:g> is active</string>
+
+    <!-- Smart Options -->
+    <string name="smart_category_title">Smart options</string>
+    <string name="smart_mute_title">Smart mute</string>
+    <string name="smart_mute_summary">Mute the incoming call by flipping the device</string>
 </resources>
diff --git a/res/xml/sound_settings.xml b/res/xml/sound_settings.xml
index 563c17a..faec8b9 100644
--- a/res/xml/sound_settings.xml
+++ b/res/xml/sound_settings.xml
@@ -80,4 +80,17 @@
 
     </PreferenceCategory>
 
+    <PreferenceCategory
+        android:key="dialer_general_smart_category_key"
+        android:title="@string/smart_category_title"
+        android:persistent="false">
+
+        <SwitchPreference
+            android:key="button_smart_mute"
+            android:title="@string/smart_mute_title"
+            android:summary="@string/smart_mute_summary"
+            android:defaultValue="false" />
+
+    </PreferenceCategory>
+
 </PreferenceScreen>
diff --git a/src/com/android/dialer/settings/SoundSettingsFragment.java b/src/com/android/dialer/settings/SoundSettingsFragment.java
index 7c4b15f..1d6ace0 100644
--- a/src/com/android/dialer/settings/SoundSettingsFragment.java
+++ b/src/com/android/dialer/settings/SoundSettingsFragment.java
@@ -79,6 +79,8 @@ public void handleMessage(Message msg) {
         }
     };
 
+    public static final String BUTTON_SMART_MUTE_KEY = "button_smart_mute";
+
     @Override
     public Context getContext() {
         return getActivity();
