From 158656b671fc5f806f44552d9ee72fc88f0ef899 Mon Sep 17 00:00:00 2001
From: YumeMichi <do4suki@gmail.com>
Date: Sun, 18 Aug 2019 21:24:04 +0800
Subject: [PATCH 44/45] Revert "fs_config: Allow targets to override OEM AID
 restrictions"

This reverts commit 94a0e43485411075bf750f5afe52450faa10eed6.

Change-Id: If4885c13d1970a9d90b845f2ec4f4a810496c491
Signed-off-by: YumeMichi <do4suki@gmail.com>
---
 tools/fs_config/Android.mk             | 12 +++-------
 tools/fs_config/fs_config_generator.py | 40 +++++-----------------------------
 2 files changed, 8 insertions(+), 44 deletions(-)

diff --git a/tools/fs_config/Android.mk b/tools/fs_config/Android.mk
index 8990ed8..0e0b1da 100644
--- a/tools/fs_config/Android.mk
+++ b/tools/fs_config/Android.mk
@@ -48,12 +48,6 @@ LOCAL_REQUIRED_MODULES := \
 include $(BUILD_PHONY_PACKAGE)
 
 
-ifneq ($(TARGET_FS_CONFIG_GEN),)
-ifeq ($(TARGET_ALLOW_LEGACY_AIDS),true)
-allow_legacy_aids := --allow-legacy-aids
-endif
-endif
-
 ##################################
 # Generate the <p>/etc/fs_config_files binary files for each partition.
 # Add fs_config_files to PRODUCT_PACKAGES in the device make file to enable.
@@ -403,7 +397,7 @@ oem := $(local-generated-sources-dir)/generated_oem_aid.h
 $(oem): PRIVATE_LOCAL_PATH := $(LOCAL_PATH)
 $(oem): PRIVATE_TARGET_FS_CONFIG_GEN := $(TARGET_FS_CONFIG_GEN)
 $(oem): PRIVATE_ANDROID_FS_HDR := $(system_android_filesystem_config)
-$(oem): PRIVATE_CUSTOM_TOOL = $(PRIVATE_LOCAL_PATH)/fs_config_generator.py oemaid --aid-header=$(PRIVATE_ANDROID_FS_HDR) $(allow_legacy_aids) $(PRIVATE_TARGET_FS_CONFIG_GEN) > $@
+$(oem): PRIVATE_CUSTOM_TOOL = $(PRIVATE_LOCAL_PATH)/fs_config_generator.py oemaid --aid-header=$(PRIVATE_ANDROID_FS_HDR) $(PRIVATE_TARGET_FS_CONFIG_GEN) > $@
 $(oem): $(TARGET_FS_CONFIG_GEN) $(LOCAL_PATH)/fs_config_generator.py
 	$(transform-generated-source)
 
@@ -429,7 +423,7 @@ $(LOCAL_BUILT_MODULE): PRIVATE_TARGET_FS_CONFIG_GEN := $(TARGET_FS_CONFIG_GEN)
 $(LOCAL_BUILT_MODULE): PRIVATE_ANDROID_FS_HDR := $(system_android_filesystem_config)
 $(LOCAL_BUILT_MODULE): $(LOCAL_PATH)/fs_config_generator.py $(TARGET_FS_CONFIG_GEN) $(system_android_filesystem_config)
 	@mkdir -p $(dir $@)
-	$(hide) $< passwd --required-prefix=vendor_ --aid-header=$(PRIVATE_ANDROID_FS_HDR) $(allow_legacy_aids) $(or $(PRIVATE_TARGET_FS_CONFIG_GEN),/dev/null) > $@
+	$(hide) $< passwd --required-prefix=vendor_ --aid-header=$(PRIVATE_ANDROID_FS_HDR) $(or $(PRIVATE_TARGET_FS_CONFIG_GEN),/dev/null) > $@
 
 ##################################
 # Generate the vendor/etc/group text file for the target
@@ -447,7 +441,7 @@ $(LOCAL_BUILT_MODULE): PRIVATE_TARGET_FS_CONFIG_GEN := $(TARGET_FS_CONFIG_GEN)
 $(LOCAL_BUILT_MODULE): PRIVATE_ANDROID_FS_HDR := $(system_android_filesystem_config)
 $(LOCAL_BUILT_MODULE): $(LOCAL_PATH)/fs_config_generator.py $(TARGET_FS_CONFIG_GEN) $(system_android_filesystem_config)
 	@mkdir -p $(dir $@)
-	$(hide) $< group --required-prefix=vendor_ --aid-header=$(PRIVATE_ANDROID_FS_HDR) $(allow_legacy_aids) $(or $(PRIVATE_TARGET_FS_CONFIG_GEN),/dev/null) > $@
+	$(hide) $< group --required-prefix=vendor_ --aid-header=$(PRIVATE_ANDROID_FS_HDR) $(or $(PRIVATE_TARGET_FS_CONFIG_GEN),/dev/null) > $@
 
 system_android_filesystem_config :=
 system_capability_header :=
diff --git a/tools/fs_config/fs_config_generator.py b/tools/fs_config/fs_config_generator.py
index 6b622fa..dccff92 100755
--- a/tools/fs_config/fs_config_generator.py
+++ b/tools/fs_config/fs_config_generator.py
@@ -588,7 +588,7 @@ class FSConfigFileParser(object):
     _SECTIONS = [('_handle_aid', ('value', )),
                  ('_handle_path', ('mode', 'user', 'group', 'caps'))]
 
-    def __init__(self, config_files, oem_ranges, warn_only=False):
+    def __init__(self, config_files, oem_ranges):
         """
         Args:
             config_files ([str]): The list of config.fs files to parse.
@@ -596,7 +596,6 @@ class FSConfigFileParser(object):
             oem_ranges ([(),()]): range tuples indicating reserved OEM ranges.
         """
 
-        self._warn_only = warn_only
         self._files = []
         self._dirs = []
         self._aids = []
@@ -711,10 +710,7 @@ class FSConfigFileParser(object):
         if not Utils.in_any_range(int(aid.value, 0), self._oem_ranges):
             emsg = '"value" not in valid range %s, got: %s'
             emsg = emsg % (str(self._oem_ranges), value)
-            if self._warn_only:
-                sys.stderr.write(error_message(emsg))
-            else:
-                sys.exit(error_message(emsg))
+            sys.exit(error_message(emsg))
 
         # use the normalized int value in the dict and detect
         # duplicate definitions of the same value
@@ -998,21 +994,13 @@ class FSConfigGen(BaseGenerator):
 
         opt_group.add_argument('--out_file', required=True, help='Output file')
 
-        opt_group.add_argument(
-            '--allow-legacy-aids',
-            action="store_true",
-            required=False,
-            default=False,
-            help='Allow legacy AIDs that fall outside allowed OEM ranges')
-
     def __call__(self, args):
 
         self._capability_parser = CapabilityHeaderParser(
             args['capability_header'])
         self._base_parser = AIDHeaderParser(args['aid_header'])
         self._oem_parser = FSConfigFileParser(args['fsconfig'],
-                                              self._base_parser.oem_ranges,
-                                              args['allow_legacy_aids'])
+                                              self._base_parser.oem_ranges)
 
         self._partition = args['partition']
         self._all_partitions = args['all_partitions']
@@ -1277,20 +1265,11 @@ class OEMAidGen(BaseGenerator):
             help='An android_filesystem_config.h file'
             'to parse AIDs and OEM Ranges from')
 
-        opt_group.add_argument(
-            '--allow-legacy-aids',
-            action="store_true",
-            required=False,
-            default=False,
-            help='Allow legacy AIDs that fall outside allowed OEM ranges')
-
     def __call__(self, args):
 
         hdr_parser = AIDHeaderParser(args['aid_header'])
 
-        parser = FSConfigFileParser(args['fsconfig'],
-                                    hdr_parser.oem_ranges,
-                                    args['allow_legacy_aids'])
+        parser = FSConfigFileParser(args['fsconfig'], hdr_parser.oem_ranges)
 
         print OEMAidGen._GENERATED
 
@@ -1342,20 +1321,11 @@ class PasswdGen(BaseGenerator):
             required=False,
             help='A prefix that the names are required to contain.')
 
-        opt_group.add_argument(
-            '--allow-legacy-aids',
-            action="store_true",
-            required=False,
-            default=False,
-            help='Allow legacy AIDs that fall outside allowed OEM ranges')
-
     def __call__(self, args):
 
         hdr_parser = AIDHeaderParser(args['aid_header'])
 
-        parser = FSConfigFileParser(args['fsconfig'],
-                                    hdr_parser.oem_ranges,
-                                    args['allow_legacy_aids'])
+        parser = FSConfigFileParser(args['fsconfig'], hdr_parser.oem_ranges)
 
         required_prefix = args['required_prefix']
 
-- 
2.7.4

