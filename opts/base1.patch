From 83c5a0b70224d86bd26955c9e21b4efd244ecace Mon Sep 17 00:00:00 2001
From: Jon Haus <haus.xda@gmail.com>
Date: Sat, 6 Dec 2014 17:19:23 +0100
Subject: [PATCH] SystemUI: Network Traffic [1/3]

 * Fix visibility when all data is disabled
 * Remove network coloring and make network meter play nice
   with dark mode by dwitherell
 * Port to cm-14.1 (vector drawables are courtesy of kover)

Change-Id: Ib947832860970a3bccfac70d27a4761f6164d3d5
---
 .../res/drawable/stat_sys_network_traffic_down.xml |  18 ++
 .../res/drawable/stat_sys_network_traffic_up.xml   |  18 ++
 .../drawable/stat_sys_network_traffic_updown.xml   |  18 ++
 packages/SystemUI/res/layout/status_bar.xml        |   9 +
 packages/SystemUI/res/values/cm_dimens.xml         |   4 +
 packages/SystemUI/res/values/cm_strings.xml        |   3 +
 .../statusbar/phone/PhoneStatusBarTransitions.java |   7 +-
 .../statusbar/phone/StatusBarIconController.java   |   4 +
 .../systemui/statusbar/policy/NetworkTraffic.java  | 320 +++++++++++++++++++++
 9 files changed, 399 insertions(+), 2 deletions(-)
 create mode 100644 packages/SystemUI/res/drawable/stat_sys_network_traffic_down.xml
 create mode 100644 packages/SystemUI/res/drawable/stat_sys_network_traffic_up.xml
 create mode 100644 packages/SystemUI/res/drawable/stat_sys_network_traffic_updown.xml
 create mode 100644 packages/SystemUI/src/com/android/systemui/statusbar/policy/NetworkTraffic.java

diff --git a/packages/SystemUI/res/drawable/stat_sys_network_traffic_down.xml b/packages/SystemUI/res/drawable/stat_sys_network_traffic_down.xml
new file mode 100644
index 0000000..50c810e
--- /dev/null
+++ b/packages/SystemUI/res/drawable/stat_sys_network_traffic_down.xml
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="14dp"
+    android:height="18dp"
+    android:viewportWidth="14"
+    android:viewportHeight="18">
+
+    <path
+        android:name="down"
+        android:fillColor="#FFFFFFFF"
+        android:pathData="M9,16l3-3h-2V8H8v5H6L9,16z" />
+
+    <path
+        android:name="up"
+        android:fillColor="#4DFFFFFF"
+        android:pathData="M5,2L2,5h2v5h2V5h2L5,2z" />
+
+</vector>
\ No newline at end of file
diff --git a/packages/SystemUI/res/drawable/stat_sys_network_traffic_up.xml b/packages/SystemUI/res/drawable/stat_sys_network_traffic_up.xml
new file mode 100644
index 0000000..9fec7ae
--- /dev/null
+++ b/packages/SystemUI/res/drawable/stat_sys_network_traffic_up.xml
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="14dp"
+    android:height="18dp"
+    android:viewportWidth="14"
+    android:viewportHeight="18">
+
+    <path
+        android:name="down"
+        android:fillColor="#4DFFFFFF"
+        android:pathData="M9,16l3-3h-2V8H8v5H6L9,16z" />
+
+    <path
+        android:name="up"
+        android:fillColor="#FFFFFFFF"
+        android:pathData="M5,2L2,5h2v5h2V5h2L5,2z" />
+
+</vector>
\ No newline at end of file
diff --git a/packages/SystemUI/res/drawable/stat_sys_network_traffic_updown.xml b/packages/SystemUI/res/drawable/stat_sys_network_traffic_updown.xml
new file mode 100644
index 0000000..36efee6
--- /dev/null
+++ b/packages/SystemUI/res/drawable/stat_sys_network_traffic_updown.xml
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="14dp"
+    android:height="18dp"
+    android:viewportWidth="14"
+    android:viewportHeight="18">
+
+    <path
+        android:name="down"
+        android:fillColor="#FFFFFFFF"
+        android:pathData="M9,16l3-3h-2V8H8v5H6L9,16z" />
+
+    <path
+        android:name="up"
+        android:fillColor="#FFFFFFFF"
+        android:pathData="M5,2L2,5h2v5h2V5h2L5,2z" />
+
+</vector>
\ No newline at end of file
diff --git a/packages/SystemUI/res/layout/status_bar.xml b/packages/SystemUI/res/layout/status_bar.xml
index 402f1ca..04fdd8c 100644
--- a/packages/SystemUI/res/layout/status_bar.xml
+++ b/packages/SystemUI/res/layout/status_bar.xml
@@ -62,6 +62,15 @@
             android:orientation="horizontal"
             >
 
+            <com.android.systemui.statusbar.policy.NetworkTraffic
+                android:id="@+id/network_traffic"
+                android:layout_width="wrap_content"
+                android:layout_height="match_parent"
+                android:layout_marginTop="2dp"
+                android:layout_marginBottom="2dp"
+                android:maxLines="2"
+                android:gravity="end|center_vertical"/>
+
             <include layout="@layout/system_icons" />
 
             <com.android.systemui.BatteryLevelTextView android:id="@+id/battery_level"
diff --git a/packages/SystemUI/res/values/cm_dimens.xml b/packages/SystemUI/res/values/cm_dimens.xml
index e1cd6fa..9c0071c 100644
--- a/packages/SystemUI/res/values/cm_dimens.xml
+++ b/packages/SystemUI/res/values/cm_dimens.xml
@@ -1,6 +1,7 @@
 <?xml version="1.0" encoding="utf-8"?>
 <!--
      Copyright (C) 2014 The CyanogenMod Project
+     Copyright (C) 2017 The LineageOS Project
 
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
@@ -29,4 +30,7 @@
 
     <dimen name="navbar_single_hand_mode_horizontal_threshhold">90dp</dimen>
     <dimen name="navbar_single_hand_mode_vertical_threshhold">48dp</dimen>
+
+    <dimen name="net_traffic_single_text_size">12dp</dimen>
+    <dimen name="net_traffic_multi_text_size">8dp</dimen>
 </resources>
diff --git a/packages/SystemUI/res/values/cm_strings.xml b/packages/SystemUI/res/values/cm_strings.xml
index 24df201..c9176f5 100644
--- a/packages/SystemUI/res/values/cm_strings.xml
+++ b/packages/SystemUI/res/values/cm_strings.xml
@@ -138,4 +138,7 @@
          values/config.xml) and must be truncated.
          [CHAR LIMIT=4] -->
     <string name="status_bar_notification_info_overflow" translatable="false">\u221E</string>
+
+    <!-- Network traffic monitor string format -->
+    <string name="network_traffic_format"><xliff:g id="value">%1$s</xliff:g> <xliff:g id="unit" example="kB">%2$s</xliff:g>/s</string>
 </resources>
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBarTransitions.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBarTransitions.java
index fb1addf..5a431f5 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBarTransitions.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBarTransitions.java
@@ -32,7 +32,7 @@
     private final PhoneStatusBarView mView;
     private final float mIconAlphaWhenOpaque;
 
-    private View mLeftSide, mStatusIcons, mSignalCluster, mBattery, mClock;
+    private View mLeftSide, mStatusIcons, mSignalCluster, mBattery, mClock, mNetworkTraffic;
     private Animator mCurrentAnimation;
 
     public PhoneStatusBarTransitions(PhoneStatusBarView view) {
@@ -48,6 +48,7 @@ public void init() {
         mSignalCluster = mView.findViewById(R.id.signal_cluster);
         mBattery = mView.findViewById(R.id.battery);
         mClock = mView.findViewById(R.id.clock);
+        mNetworkTraffic = mView.findViewById(R.id.network_traffic);
         applyModeBackground(-1, getMode(), false /*animate*/);
         applyMode(getMode(), false /*animate*/);
     }
@@ -91,6 +92,7 @@ private void applyMode(int mode, boolean animate) {
                     animateTransitionTo(mLeftSide, newAlpha),
                     animateTransitionTo(mStatusIcons, newAlpha),
                     animateTransitionTo(mSignalCluster, newAlpha),
+                    animateTransitionTo(mNetworkTraffic, newAlpha),
                     animateTransitionTo(mBattery, newAlphaBC),
                     animateTransitionTo(mClock, newAlphaBC)
                     );
@@ -103,8 +105,9 @@ private void applyMode(int mode, boolean animate) {
             mLeftSide.setAlpha(newAlpha);
             mStatusIcons.setAlpha(newAlpha);
             mSignalCluster.setAlpha(newAlpha);
+            mNetworkTraffic.setAlpha(newAlpha);
             mBattery.setAlpha(newAlphaBC);
             mClock.setAlpha(newAlphaBC);
         }
     }
-}
\ No newline at end of file
+}
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBarIconController.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBarIconController.java
index a0d1a61..eacae58 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBarIconController.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBarIconController.java
@@ -47,6 +47,7 @@
 import com.android.systemui.statusbar.NotificationData;
 import com.android.systemui.statusbar.SignalClusterView;
 import com.android.systemui.statusbar.StatusBarIconView;
+import com.android.systemui.statusbar.policy.NetworkTraffic;
 import com.android.systemui.tuner.TunerService;
 import com.android.systemui.tuner.TunerService.Tunable;
 
@@ -80,6 +81,7 @@
     private BatteryMeterView mBatteryMeterViewKeyguard;
     private ClockController mClockController;
     private View mCenterClockLayout;
+    private NetworkTraffic mNetworkTraffic;
 
     private int mIconSize;
     private int mIconHPadding;
@@ -139,6 +141,7 @@ public StatusBarIconController(Context context, View statusBar, View keyguardSta
         mBatteryMeterViewKeyguard = (BatteryMeterView) keyguardStatusBar.findViewById(R.id.battery);
         scaleBatteryMeterViews(context);
 
+        mNetworkTraffic = (NetworkTraffic) statusBar.findViewById(R.id.network_traffic);
         mDarkModeIconColorSingleTone = context.getColor(R.color.dark_mode_icon_color_single_tone);
         mLightModeIconColorSingleTone = context.getColor(R.color.light_mode_icon_color_single_tone);
         mHandler = new Handler();
@@ -549,6 +552,7 @@ private void applyIconTint() {
                 isInArea(mTintArea, mBatteryMeterView) ? mDarkIntensity : 0);
         mClockController.setTextColor(mTintArea, mIconTint);
         mBatteryLevelView.setTextColor(getTint(mTintArea, mBatteryLevelView, mIconTint));
+        mNetworkTraffic.setDarkIntensity(mDarkIntensity);
     }
 
     public void appTransitionPending() {
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/policy/NetworkTraffic.java b/packages/SystemUI/src/com/android/systemui/statusbar/policy/NetworkTraffic.java
new file mode 100644
index 0000000..02f7662
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/policy/NetworkTraffic.java
@@ -0,0 +1,320 @@
+/**
+ * Copyright (C) 2017 The LineageOS project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.systemui.statusbar.policy;
+
+import android.animation.ArgbEvaluator;
+import android.content.BroadcastReceiver;
+import android.content.ContentResolver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.content.res.Resources;
+import android.database.ContentObserver;
+import android.graphics.Color;
+import android.graphics.drawable.Drawable;
+import android.graphics.PorterDuff;
+import android.net.ConnectivityManager;
+import android.net.TrafficStats;
+import android.os.Handler;
+import android.os.UserHandle;
+import android.os.Message;
+import android.os.SystemClock;
+import android.text.format.Formatter;
+import android.util.AttributeSet;
+import android.util.TypedValue;
+import android.widget.TextView;
+
+import com.android.systemui.R;
+
+import cyanogenmod.providers.CMSettings.Secure;
+
+public class NetworkTraffic extends TextView {
+    private static final int MODE_DISABLED = 0;
+    private static final int MODE_UPSTREAM_ONLY = 1;
+    private static final int MODE_DOWNSTREAM_ONLY = 2;
+    private static final int MODE_UPSTREAM_AND_DOWNSTREAM = 3;
+    private static final int REFRESH_INTERVAL = 1000;
+
+    private int mMode = MODE_DISABLED;
+    private boolean mAttached;
+    private long mTotalRxBytes;
+    private long mTotalTxBytes;
+    private long mLastUpdateTime;
+    private int mTextSizeSingle;
+    private int mTextSizeMulti;
+    private boolean mAutoHide;
+    private int mAutoHideThreshold;
+    private int mDarkModeBackgroundColor;
+    private int mDarkModeFillColor;
+    private int mLightModeBackgroundColor;
+    private int mLightModeFillColor;
+    private int mIconTint = Color.WHITE;
+    private SettingsObserver mObserver;
+    private Drawable mDrawable;
+
+    private Handler mTrafficHandler = new Handler() {
+        @Override
+        public void handleMessage(Message msg) {
+            long timeDelta = SystemClock.elapsedRealtime() - mLastUpdateTime;
+
+            if (timeDelta < REFRESH_INTERVAL * 0.95) {
+                if (msg.what != 1) {
+                    // View was just updated, nothing further to do
+                    return;
+                }
+                if (timeDelta < 1) {
+                    // Can't div by 0 so make sure the value displayed is minimal
+                    timeDelta = Long.MAX_VALUE;
+                }
+            }
+            mLastUpdateTime = SystemClock.elapsedRealtime();
+
+            // Calculate the data rate from the change in total bytes and time
+            long newTotalRxBytes = TrafficStats.getTotalRxBytes();
+            long newTotalTxBytes = TrafficStats.getTotalTxBytes();
+            long rxData = newTotalRxBytes - mTotalRxBytes;
+            long txData = newTotalTxBytes - mTotalTxBytes;
+
+            if (shouldHide(rxData, txData, timeDelta)) {
+                setText("");
+                setVisibility(GONE);
+            } else if (!isConnectionAvailable()) {
+                clearHandlerCallbacks();
+                setVisibility(GONE);
+            } else {
+                // Get information for uplink ready so the line return can be added
+                StringBuilder output = new StringBuilder();
+                if (shouldShowUpstream()) {
+                    output.append(formatOutput(timeDelta, txData));
+                }
+
+                // Ensure text size is where it needs to be
+                int textSize;
+                if (mMode == MODE_UPSTREAM_AND_DOWNSTREAM) {
+                    output.append("\n");
+                    textSize = mTextSizeMulti;
+                } else {
+                    textSize = mTextSizeSingle;
+                }
+
+                // Add information for downlink if it's called for
+                if (shouldShowDownstream()) {
+                    output.append(formatOutput(timeDelta, rxData));
+                }
+
+                // Update view if there's anything new to show
+                if (!output.toString().contentEquals(getText())) {
+                    setTextSize(TypedValue.COMPLEX_UNIT_PX, (float) textSize);
+                    setText(output.toString());
+                }
+                setVisibility(VISIBLE);
+            }
+
+            // Post delayed message to refresh in ~1000ms
+            mTotalRxBytes = newTotalRxBytes;
+            mTotalTxBytes = newTotalTxBytes;
+            clearHandlerCallbacks();
+            mTrafficHandler.sendEmptyMessageDelayed(0, REFRESH_INTERVAL);
+        }
+
+        private boolean shouldShowUpstream() {
+            return mMode == MODE_UPSTREAM_ONLY || mMode == MODE_UPSTREAM_AND_DOWNSTREAM;
+        }
+
+        private boolean shouldShowDownstream() {
+            return mMode == MODE_DOWNSTREAM_ONLY || mMode == MODE_UPSTREAM_AND_DOWNSTREAM;
+        }
+
+        private String formatOutput(long timeDelta, long data) {
+            long speed = (long) (data / (timeDelta / 1000f));
+            final Formatter.BytesResult result = Formatter.formatBytes(
+                    mContext.getResources(), speed, 0);
+            return mContext.getString(R.string.network_traffic_format,
+                    result.value, result.units);
+        }
+
+        private boolean shouldHide(long rxData, long txData, long timeDelta) {
+            if (!mAutoHide) {
+                return false;
+            }
+            long speedTxKB = (long) (txData / (timeDelta / 1000f)) / 1024;
+            long speedRxKB = (long) (rxData / (timeDelta / 1000f)) / 1024;
+
+            if (shouldShowUpstream() && speedTxKB > mAutoHideThreshold) {
+                return false;
+            }
+            if (shouldShowDownstream() && speedRxKB > mAutoHideThreshold) {
+                return false;
+            }
+            return true;
+        }
+    };
+
+    private final BroadcastReceiver mIntentReceiver = new BroadcastReceiver() {
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            String action = intent.getAction();
+            if (ConnectivityManager.CONNECTIVITY_ACTION.equals(action)) {
+                updateViewState();
+            }
+        }
+    };
+
+    class SettingsObserver extends ContentObserver {
+        SettingsObserver(Handler handler) {
+            super(handler);
+        }
+
+        void observe() {
+            ContentResolver resolver = mContext.getContentResolver();
+            resolver.registerContentObserver(
+                    Secure.getUriFor(Secure.NETWORK_TRAFFIC_MODE),
+                    false, this, UserHandle.USER_ALL);
+            resolver.registerContentObserver(
+                    Secure.getUriFor(Secure.NETWORK_TRAFFIC_AUTOHIDE),
+                    false, this, UserHandle.USER_ALL);
+            resolver.registerContentObserver(
+                    Secure.getUriFor(Secure.NETWORK_TRAFFIC_AUTOHIDE_THRESHOLD),
+                    false, this, UserHandle.USER_ALL);
+        }
+
+        void unobserve() {
+            mContext.getContentResolver().unregisterContentObserver(this);
+        }
+
+        @Override
+        public void onChange(boolean selfChange) {
+            updateSettings();
+        }
+    }
+
+    public NetworkTraffic(Context context) {
+        this(context, null);
+    }
+
+    public NetworkTraffic(Context context, AttributeSet attrs) {
+        this(context, attrs, 0);
+    }
+
+    public NetworkTraffic(Context context, AttributeSet attrs, int defStyle) {
+        super(context, attrs, defStyle);
+
+        final Resources resources = getResources();
+        mTextSizeSingle = resources.getDimensionPixelSize(R.dimen.net_traffic_single_text_size);
+        mTextSizeMulti = resources.getDimensionPixelSize(R.dimen.net_traffic_multi_text_size);
+
+        mDarkModeBackgroundColor =
+                context.getColor(R.color.dark_mode_icon_color_dual_tone_background);
+        mDarkModeFillColor = context.getColor(R.color.dark_mode_icon_color_dual_tone_fill);
+        mLightModeBackgroundColor =
+                context.getColor(R.color.light_mode_icon_color_dual_tone_background);
+        mLightModeFillColor = context.getColor(R.color.light_mode_icon_color_dual_tone_fill);
+
+        mObserver = new SettingsObserver(mTrafficHandler);
+    }
+
+    @Override
+    protected void onAttachedToWindow() {
+        super.onAttachedToWindow();
+        if (!mAttached) {
+            mAttached = true;
+            mContext.registerReceiver(mIntentReceiver,
+                    new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION));
+            mObserver.observe();
+        }
+        updateSettings();
+    }
+
+    @Override
+    protected void onDetachedFromWindow() {
+        super.onDetachedFromWindow();
+        if (mAttached) {
+            mContext.unregisterReceiver(mIntentReceiver);
+            mObserver.unobserve();
+            mAttached = false;
+        }
+    }
+
+    private boolean isConnectionAvailable() {
+        ConnectivityManager cm =
+                (ConnectivityManager) mContext.getSystemService(Context.CONNECTIVITY_SERVICE);
+        return cm.getActiveNetworkInfo() != null;
+    }
+
+    private void updateSettings() {
+        ContentResolver resolver = mContext.getContentResolver();
+
+        mMode = Secure.getIntForUser(resolver, Secure.NETWORK_TRAFFIC_MODE,
+                0, UserHandle.USER_CURRENT);
+        mAutoHide = Secure.getIntForUser(resolver, Secure.NETWORK_TRAFFIC_AUTOHIDE,
+                0, UserHandle.USER_CURRENT) == 1;
+        mAutoHideThreshold = Secure.getIntForUser(resolver,
+                Secure.NETWORK_TRAFFIC_AUTOHIDE_THRESHOLD, 10, UserHandle.USER_CURRENT);
+
+        if (mMode != MODE_DISABLED) {
+            updateTrafficDrawable();
+        }
+        updateViewState();
+    }
+
+    private void updateViewState() {
+        if (mMode != MODE_DISABLED && isConnectionAvailable()) {
+            if (mAttached) {
+                mTotalRxBytes = TrafficStats.getTotalRxBytes();
+                mLastUpdateTime = SystemClock.elapsedRealtime();
+                mTrafficHandler.sendEmptyMessage(1);
+            }
+        } else {
+            clearHandlerCallbacks();
+            setVisibility(GONE);
+        }
+    }
+
+    private void clearHandlerCallbacks() {
+        mTrafficHandler.removeMessages(0);
+        mTrafficHandler.removeMessages(1);
+    }
+
+    private void updateTrafficDrawable() {
+        final int drawableResId;
+        if (mMode == MODE_UPSTREAM_AND_DOWNSTREAM) {
+            drawableResId = R.drawable.stat_sys_network_traffic_updown;
+        } else if (mMode == MODE_UPSTREAM_ONLY) {
+            drawableResId = R.drawable.stat_sys_network_traffic_up;
+        } else if (mMode == MODE_DOWNSTREAM_ONLY) {
+            drawableResId = R.drawable.stat_sys_network_traffic_down;
+        } else {
+            drawableResId = 0;
+        }
+        mDrawable = drawableResId != 0 ? getResources().getDrawable(drawableResId) : null;
+        setCompoundDrawablesWithIntrinsicBounds(null, null, mDrawable, null);
+        updateTrafficDrawableColor();
+    }
+
+    private void updateTrafficDrawableColor() {
+        if (mDrawable != null) {
+            mDrawable.setColorFilter(mIconTint, PorterDuff.Mode.SRC_ATOP);
+        }
+    }
+
+    public void setDarkIntensity(float darkIntensity) {
+        mIconTint = (int) ArgbEvaluator.getInstance().evaluate(darkIntensity,
+                mLightModeFillColor, mDarkModeFillColor);
+        setTextColor(mIconTint);
+        updateTrafficDrawableColor();
+    }
+}
